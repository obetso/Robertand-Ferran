import random
import os
import msvcrt
import time

# Define the width and height of the game area
width = 20
height = 10

game_over = False
score = 0
snakeX = width // 2
snakeY = height // 2
fruitX = random.randint(1, width - 1)
fruitY = random.randint(1, height - 1)
tailX = [0] * 100
tailY = [0] * 100
tail_length = 0

# Enum to represent different directions
class Direction:
    STOP = 0
    LEFT = 1
    RIGHT = 2
    UP = 3
    DOWN = 4

dir = Direction.STOP

def draw():
    os.system('cls')  # Clear the console/terminal

    # Draw the game area, snake, and fruit
    for i in range(height + 2):
        for j in range(width + 2):
            if j == 0 or j == width + 1:
                print("#", end="")
            elif i == snakeY and j == snakeX:
                print("O", end="")  # Snake's head
            elif i == fruitY and j == fruitX:
                print("F", end="")  # Fruit
            else:
                print("o" if (j, i) in zip(tailX[:tail_length], tailY[:tail_length]) else " ", end="")  # Snake's tail
        print()

    print("Score:", score)

def input_key():
    if msvcrt.kbhit():
        key = msvcrt.getch().decode('utf-8')
        return key.lower()
    return ''

def logic():
    global snakeX, snakeY, game_over, score, tail_length, fruitX, fruitY

    # Update the position of the snake's tail
    prevX = tailX[0]
    prevY = tailY[0]
    prev2X, prev2Y = 0, 0
    tailX[0] = snakeX
    tailY[0] = snakeY

    # Move the tail segments
    for i in range(1, tail_length):
        prev2X = tailX[i]
        prev2Y = tailY[i]
        tailX[i] = prevX
        tailY[i] = prevY
        prevX = prev2X
        prevY = prev2Y

    # Update the snake's head position based on the current direction
    if dir == Direction.LEFT:
        snakeX -= 1
    elif dir == Direction.RIGHT:
        snakeX += 1
    elif dir == Direction.UP:
        snakeY -= 1
    elif dir == Direction.DOWN:
        snakeY += 1

    # Check for collisions with the game borders
    if snakeX >= width:
        snakeX = 0
    elif snakeX < 0:
        snakeX = width - 1
    if snakeY >= height:
        snakeY = 0
    elif snakeY < 0:
        snakeY = height - 1

    # Check for collision with the snake's tail, end the game if there's a collision
    for i in range(tail_length):
        if tailX[i] == snakeX and tailY[i] == snakeY:
            game_over = True

    # Check if the snake has eaten the fruit
    if snakeX == fruitX and snakeY == fruitY:
        score += 10  # Increase the score
        # Place the fruit at a new random location
        fruitX = random.randint(1, width - 1)
        fruitY = random.randint(1, height - 1)
        tail_length += 1  # Increase the length of the snake

while not game_over:
    draw()
    key = input_key()

    if key == 'a':
        dir = Direction.LEFT
    elif key == 'd':
        dir = Direction.RIGHT
    elif key == 'w':
        dir = Direction.UP
    elif key == 's':
        dir = Direction.DOWN
    elif key == 'x':
        game_over = True

    logic()
    time.sleep(0.1)

print("Game Over")
